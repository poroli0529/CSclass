상속의 구현 목적은 비슷한 기능을 가진 객체끼리 코드를 공유 & 확장해서 
코드 중복을 최소화하는 것 입니다. 

상속을 통해 상속받은 메소드들을 사용하다보면 다시 또 메소드들을 사용하는
데에 있어서 코드가 반복되는 것을 알 수 있습니다.

그래서 또 다시 다형성이라는 것을 구현합니다.
다형성은 자식 객체를 부모 객체 형태로 변환이 가능한 성질을 의미합니다.

자식 객체를 부모 객체 형태로 바꾸면 바꿔진 객체는 부모의 기능까지만 사용
가능합니다. 

그래서 animal animal = new cat();에서 animal은 부모인 animal의 기능만
사용이 가능합니다. 

형변환 
확인 : (객체) is (자료형) 키워드는 true or false를 리턴합니다. 
변환 : (자료형)객체이름 형식 > 일반적인 자료형 변환 형식
[C#고유 문법] as : as키워드는 자료형 변환이 안되면 예외 처리를 하지않고
		NULL을 리턴한다. 

if (item is dog) == if (item is Animal) == if (item is Object)
 == if (true) 
item 이 dog라면 개는 동물 상속이고 동물은 객체 상속이므로 모두 is키워드
로비교하면 true를 리턴한다. 

var dog = item as dog;  문장에서 
dog 이면 dog로 변환해 대입, 아니면 null 대입이 이뤄집니다. 
